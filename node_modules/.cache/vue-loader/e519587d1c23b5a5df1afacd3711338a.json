{"remainingRequest":"F:\\itcast-work\\heima-jee131\\课前资料\\静态原型\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\itcast-work\\heima-jee131\\课前资料\\静态原型\\leyou-manage-web\\src\\views\\item\\SeckillForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\itcast-work\\heima-jee131\\课前资料\\静态原型\\leyou-manage-web\\src\\views\\item\\SeckillForm.vue","mtime":1578814705725},{"path":"F:\\itcast-work\\heima-jee131\\课前资料\\静态原型\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\itcast-work\\heima-jee131\\课前资料\\静态原型\\leyou-manage-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\itcast-work\\heima-jee131\\课前资料\\静态原型\\leyou-manage-web\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1549812933000},{"path":"F:\\itcast-work\\heima-jee131\\课前资料\\静态原型\\leyou-manage-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\itcast-work\\heima-jee131\\课前资料\\静态原型\\leyou-manage-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: \"seckill-form\",\r\n  props: {\r\n    oldGoods: {\r\n      type: Object\r\n    },\r\n    isEdit: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    step: {\r\n      type: Number,\r\n      default: 1\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      valid:false,\r\n      goods: {\r\n        categories: [], // 商品分类信息\r\n        brandId: 0, // 品牌id信息\r\n        spuId:0,\r\n        skuId:0,\r\n        name:\"\"\r\n      },\r\n      date: new Date().toISOString().substr(0, 10),\r\n      menu2: false,\r\n      miaoshatiems: ['10:00:00', '12:00:00', '14:00:00', '16:00:00', '18:00:00', '20:00:00'],\r\n      brandOptions: [], // 品牌列表\r\n      goodsOptions: [],//商品列表\r\n      skuOptions:[],//sku列表\r\n      mstime:\"10:00:00\"\r\n    };\r\n  },\r\n  methods: {\r\n    submit() {\r\n      // 表单校验。\r\n      if(!this.$refs.basic.validate){\r\n        this.$message.error(\"请先完成表单内容！\");\r\n      }\r\n      // 先处理goods，用解构表达式接收,除了categories外，都接收到goodsParams中\r\n      const {\r\n        categories: [{ id: cid1 }, { id: cid2 }, { id: cid3 }],\r\n        ...goodsParams\r\n      } = this.goods;\r\n      Object.assign(goodsParams, {\r\n        cid1,\r\n        cid2,\r\n        cid3, // 商品分类\r\n      });\r\n      goodsParams.oldPrice=this.$format(goodsParams.oldPrice); // 价格需要格式化\r\n      goodsParams.costPrice=this.$format(goodsParams.costPrice); // 价格需要格式化\r\n      goodsParams.beginTime = new Date(this.date+\" \"+this.mstime);\r\n      goodsParams.endTime = null;\r\n      this.$http({\r\n        method: this.isEdit ? \"put\" : \"post\",\r\n        url: \"/manageSec/\",\r\n        data: goodsParams\r\n      })\r\n        .then(() => {\r\n          // 成功，关闭窗口\r\n          this.$emit(\"close\");\r\n          // 提示成功\r\n          this.$message.success(\"保存成功了\");\r\n        })\r\n        .catch(() => {\r\n          this.$message.error(\"保存失败！\");\r\n        });\r\n    }\r\n  },\r\n  watch: {\r\n    oldGoods: {\r\n      deep: true,\r\n      handler(val) {\r\n        if (!this.isEdit) {\r\n          Object.assign(this.goods, {\r\n            categories: null, // 商品分类信息\r\n            brandId: 0, // 品牌id信息\r\n            name: \"\", // 标题\r\n            subTitle: \"\", // 子标题\r\n          });\r\n        } else {\r\n          this.goods = Object.deepCopy(val);\r\n          this.date = val.secKillDate;\r\n          this.mstime = val.beginTime.substring(11,19);\r\n          console.info(this.mstime);\r\n          // 先得到分类名称\r\n          const names = val.categoryName.split(\"/\");\r\n          delete this.goods.categoryName;\r\n          delete this.goods.brandName;\r\n          delete this.goods.createTime;\r\n          // 组织商品分类数据\r\n          this.goods.categories = [\r\n            { id: val.cid1, name: names[0] },\r\n            { id: val.cid2, name: names[1] },\r\n            { id: val.cid3, name: names[2] }\r\n          ];\r\n          this.goods.id = val.id;\r\n          this.goods.oldPrice =this.$format(val.oldPrice); // 价格需要格式化\r\n          this.goods.costPrice=this.$format(val.costPrice); // 价格需要格式化\r\n        }\r\n      }\r\n    },\r\n    \"goods.categories\": {\r\n      deep: true,\r\n      handler(val) {\r\n        // 判断商品分类是否存在，存在才查询\r\n        if (val && val.length > 0) {\r\n          //把品牌列表设置为空\r\n          this.brandOptions = [];\r\n          // 根据分类查询品牌\r\n          this.$http\r\n            .get(\"/item/brand/of/category?id=\" + this.goods.categories[2].id)\r\n            .then(({ data }) => {\r\n              this.brandOptions = data;\r\n            });\r\n        }\r\n      }\r\n    },\r\n    \"goods.brandId\":{\r\n      handler(val){\r\n        if (val && val!= 0) {\r\n          //把商品列表设置为空\r\n          this.goodsOptions = [];\r\n          // 根据分类查询品牌\r\n          this.$http\r\n            .get(\"/item/spu/for/brand?id=\" + this.goods.brandId+\"&cid=\"+this.goods.categories[2].id)\r\n            .then(({ data }) => {\r\n              this.goodsOptions = data;\r\n            });\r\n        }\r\n      }\r\n    },\r\n    \"goods.spuId\":{\r\n      handler(val){\r\n        if (val && val!= 0) {\r\n          this.goodsOptions.forEach(spu =>{\r\n            if(this.goods.spuId == spu.id){\r\n              this.goods.name = spu.name;\r\n            }\r\n          });\r\n          this.$http\r\n              .get(\"/item/sku/of/spu?id=\" + this.goods.spuId)\r\n              .then(({ data }) => {\r\n                this.skuOptions = data;\r\n              });\r\n\r\n        }\r\n      }\r\n    },\r\n    \"goods.skuId\":{\r\n      handler(val){\r\n        if (val && val!= 0) {\r\n          this.skuOptions.forEach(sku =>{\r\n            if(sku.id == this.goods.skuId){\r\n              this.goods.title = sku.title;\r\n              this.goods.oldPrice =  this.$format(sku.price);\r\n              this.goods.skuPic = sku.images?sku.images:\"\";\r\n\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    skus() {\r\n      // 过滤掉用户没有填写数据的规格参数\r\n      const arr = this.specialSpecs.filter(s => s.options.length > 0);\r\n      // 通过reduce进行累加笛卡尔积\r\n      return arr.reduce(\r\n        (last, spec, index) => {\r\n          const result = [];\r\n          last.forEach(o => {\r\n            spec.options.forEach((option, i) => {\r\n              const obj = JSON.parse(JSON.stringify(o));\r\n              obj[spec.name] = {v:option, id:spec.id};\r\n              obj.indexes = (obj.indexes || '') + '_' +  i\r\n              if (index === arr.length - 1) {\r\n                obj.indexes = obj.indexes.substring(1);\r\n                // 如果发现是最后一组，则添加价格、库存等字段\r\n                Object.assign(obj, {\r\n                  price: 0,\r\n                  stock: 0,\r\n                  enable: false,\r\n                  images: []\r\n                });\r\n                if (this.isEdit) {\r\n                  // 如果是编辑，则回填sku信息\r\n                  const sku = this.goods.skus.get(obj.indexes);\r\n                  if (sku != null) {\r\n                    const { price, stock, enable, images } = sku;\r\n                    Object.assign(obj, {\r\n                      price: this.$format(price),\r\n                      stock,\r\n                      enable,\r\n                      images: images ? images.split(\",\") : [],\r\n                    });\r\n                  }\r\n                }\r\n              }\r\n              result.push(obj);\r\n            });\r\n          });\r\n          return result;\r\n        },\r\n        [{}]\r\n      );\r\n    },\r\n    headers() {\r\n      if (this.skus.length <= 0) {\r\n        return [];\r\n      }\r\n      const headers = [];\r\n      Object.keys(this.skus[0]).forEach(k => {\r\n        let value = k;\r\n        if (k === \"price\") {\r\n          // enable，表头要翻译成“价格”\r\n          k = \"价格\";\r\n        } else if (k === \"stock\") {\r\n          // enable，表头要翻译成“库存”\r\n          k = \"库存\";\r\n        } else if (k === \"enable\") {\r\n          // enable，表头要翻译成“是否启用”\r\n          k = \"是否启用\";\r\n        } else if (k === \"images\" || k === 'indexes') {\r\n          // 图片和索引不在表格中展示\r\n          return;\r\n        }\r\n        headers.push({\r\n          text: k,\r\n          align: \"center\",\r\n          sortable: false,\r\n          value\r\n        });\r\n      });\r\n      return headers;\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["SeckillForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"SeckillForm.vue","sourceRoot":"src/views/item","sourcesContent":["<template>\r\n  <v-stepper v-model=\"step\">\r\n    <v-stepper-header>\r\n      <v-stepper-step :complete=\"step > 1\" step=\"1\">选择商品</v-stepper-step>\r\n      <v-divider/>\r\n      <v-stepper-step step=\"2\">秒杀信息</v-stepper-step>\r\n    </v-stepper-header>\r\n    <v-stepper-items>\r\n      <!--1、选择商品-->\r\n      <v-stepper-content step=\"1\">\r\n        <v-flex class=\"xs10 mx-auto px-3\">\r\n          <v-form v-model=\"valid\" ref=\"basic\">\r\n            <v-layout row>\r\n              <v-flex xs5>\r\n                <!--商品分类-->\r\n                <v-cascader\r\n                  url=\"/item/category/of/parent\"\r\n                  required\r\n                  showAllLevels\r\n                  v-model=\"goods.categories\"\r\n                  label=\"请选择商品分类\"/>\r\n              </v-flex>\r\n              <v-spacer/>\r\n              <v-flex xs5>\r\n                <!--品牌-->\r\n                <v-autocomplete\r\n                  :items=\"brandOptions\"\r\n                  item-text=\"name\"\r\n                  item-value=\"id\"\r\n                  label=\"所属品牌\"\r\n                  v-model=\"goods.brandId\"\r\n                  required\r\n                  autocomplete\r\n                  clearable\r\n                  dense chips\r\n                  :rules=\"[v => !!v || '品牌不能为空']\"\r\n                >\r\n                  <template slot=\"selection\" slot-scope=\"data\">\r\n                    <v-chip small>{{ data.item.name}}</v-chip>\r\n                  </template>\r\n                </v-autocomplete>\r\n              </v-flex>\r\n            </v-layout>\r\n            <v-layout>\r\n              <v-flex xs5>\r\n                <!--商品 spu-->\r\n                <v-autocomplete\r\n                        :items=\"goodsOptions\"\r\n                        item-text=\"name\"\r\n                        item-value=\"id\"\r\n                        label=\"选择商品\"\r\n                        v-model=\"goods.spuId\"\r\n                        required\r\n                        autocomplete\r\n                        clearable\r\n                        dense chips\r\n                        :rules=\"[v => !!v || '商品不能为空']\"\r\n                >\r\n                  <template slot=\"selection\" slot-scope=\"data\">\r\n                    <v-chip small>{{ data.item.name}}</v-chip>\r\n                  </template>\r\n                </v-autocomplete>\r\n              </v-flex>\r\n              <v-spacer/>\r\n              <v-flex xs5>\r\n                <!--商品 sku-->\r\n                <v-autocomplete\r\n                        :items=\"skuOptions\"\r\n                        item-text=\"title\"\r\n                        item-value=\"id\"\r\n                        label=\"选择SKU\"\r\n                        v-model=\"goods.skuId\"\r\n                        required\r\n                        autocomplete\r\n                        clearable\r\n                        dense chips\r\n                        :rules=\"[v => !!v || 'SKU不能为空']\"\r\n                >\r\n                  <template slot=\"selection\" slot-scope=\"data\">\r\n                    <v-chip small>{{ data.item.title}}</v-chip>\r\n                  </template>\r\n                </v-autocomplete>\r\n              </v-flex>\r\n            </v-layout>\r\n            <v-flex>\r\n              <v-text-field label=\"商品标题\" v-model=\"goods.title\" :counter=\"200\" required :rules=\"[v => !!v || '商品标题不能为空']\" hide-details/>\r\n              <v-text-field label=\"商品卖点\" v-model=\"goods.subTitle\" :counter=\"200\" hide-details/>\r\n              <!--图片上传组件-->\r\n\r\n                <v-card class=\"elevation-2 flex xs11 mx-auto my-2\">\r\n                  <img width=\"200px\" :src=\"goods.skuPic\" alt=\"\">\r\n                </v-card>\r\n\r\n\r\n            </v-flex>\r\n          </v-form>\r\n        </v-flex>\r\n      </v-stepper-content>\r\n      <!--2、商品描述-->\r\n      <v-stepper-content step=\"2\">\r\n        <v-layout>\r\n          <v-flex xs5>\r\n              <v-menu\r\n                      v-model=\"menu2\"\r\n                      :close-on-content-click=\"false\"\r\n                      :nudge-right=\"40\"\r\n                      transition=\"scale-transition\"\r\n                      offset-y\r\n                      min-width=\"290px\"\r\n\r\n              >\r\n                <template v-slot:activator=\"{ on }\">\r\n                  <v-text-field\r\n                          v-model=\"date\"\r\n                          label=\"请选择秒杀日期\"\r\n                          prepend-icon=\"event\"\r\n                          readonly\r\n                          v-on=\"on\"\r\n                          :rules=\"[v => !!v || '请选择秒杀日期']\"\r\n                  ></v-text-field>\r\n                </template>\r\n                <v-date-picker v-model=\"date\" @input=\"menu2 = false\" locale=\"zh-cn\"></v-date-picker>\r\n              </v-menu>\r\n          </v-flex>\r\n          <v-spacer/>\r\n          <v-flex xs5>\r\n              <v-select\r\n                      :items=\"miaoshatiems\"\r\n                      v-model=\"mstime\"\r\n                      label=\"秒杀开始时间\"\r\n                      dense\r\n                      outlined\r\n                      :rules=\"[v => !!v || '请选择秒杀时间']\"\r\n              ></v-select>\r\n          </v-flex>\r\n        </v-layout>\r\n        <v-flex>\r\n        <v-text-field label=\"商品数量\" v-model=\"goods.num\"   hide-details/>\r\n        <v-text-field label=\"商品原价\" v-model=\"goods.oldPrice\"  hide-details/>\r\n        <v-text-field label=\"秒杀价格\" v-model=\"goods.costPrice\"   hide-details/>\r\n        </v-flex>\r\n        <!--提交按钮-->\r\n        <v-flex xs3 offset-xs9>\r\n\r\n          <v-btn color=\"info\" @click=\"submit\">保存秒杀信息</v-btn>\r\n        </v-flex>\r\n      </v-stepper-content>\r\n    </v-stepper-items>\r\n  </v-stepper>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"seckill-form\",\r\n  props: {\r\n    oldGoods: {\r\n      type: Object\r\n    },\r\n    isEdit: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    step: {\r\n      type: Number,\r\n      default: 1\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      valid:false,\r\n      goods: {\r\n        categories: [], // 商品分类信息\r\n        brandId: 0, // 品牌id信息\r\n        spuId:0,\r\n        skuId:0,\r\n        name:\"\"\r\n      },\r\n      date: new Date().toISOString().substr(0, 10),\r\n      menu2: false,\r\n      miaoshatiems: ['10:00:00', '12:00:00', '14:00:00', '16:00:00', '18:00:00', '20:00:00'],\r\n      brandOptions: [], // 品牌列表\r\n      goodsOptions: [],//商品列表\r\n      skuOptions:[],//sku列表\r\n      mstime:\"10:00:00\"\r\n    };\r\n  },\r\n  methods: {\r\n    submit() {\r\n      // 表单校验。\r\n      if(!this.$refs.basic.validate){\r\n        this.$message.error(\"请先完成表单内容！\");\r\n      }\r\n      // 先处理goods，用解构表达式接收,除了categories外，都接收到goodsParams中\r\n      const {\r\n        categories: [{ id: cid1 }, { id: cid2 }, { id: cid3 }],\r\n        ...goodsParams\r\n      } = this.goods;\r\n      Object.assign(goodsParams, {\r\n        cid1,\r\n        cid2,\r\n        cid3, // 商品分类\r\n      });\r\n      goodsParams.oldPrice=this.$format(goodsParams.oldPrice); // 价格需要格式化\r\n      goodsParams.costPrice=this.$format(goodsParams.costPrice); // 价格需要格式化\r\n      goodsParams.beginTime = new Date(this.date+\" \"+this.mstime);\r\n      goodsParams.endTime = null;\r\n      this.$http({\r\n        method: this.isEdit ? \"put\" : \"post\",\r\n        url: \"/manageSec/\",\r\n        data: goodsParams\r\n      })\r\n        .then(() => {\r\n          // 成功，关闭窗口\r\n          this.$emit(\"close\");\r\n          // 提示成功\r\n          this.$message.success(\"保存成功了\");\r\n        })\r\n        .catch(() => {\r\n          this.$message.error(\"保存失败！\");\r\n        });\r\n    }\r\n  },\r\n  watch: {\r\n    oldGoods: {\r\n      deep: true,\r\n      handler(val) {\r\n        if (!this.isEdit) {\r\n          Object.assign(this.goods, {\r\n            categories: null, // 商品分类信息\r\n            brandId: 0, // 品牌id信息\r\n            name: \"\", // 标题\r\n            subTitle: \"\", // 子标题\r\n          });\r\n        } else {\r\n          this.goods = Object.deepCopy(val);\r\n          this.date = val.secKillDate;\r\n          this.mstime = val.beginTime.substring(11,19);\r\n          console.info(this.mstime);\r\n          // 先得到分类名称\r\n          const names = val.categoryName.split(\"/\");\r\n          delete this.goods.categoryName;\r\n          delete this.goods.brandName;\r\n          delete this.goods.createTime;\r\n          // 组织商品分类数据\r\n          this.goods.categories = [\r\n            { id: val.cid1, name: names[0] },\r\n            { id: val.cid2, name: names[1] },\r\n            { id: val.cid3, name: names[2] }\r\n          ];\r\n          this.goods.id = val.id;\r\n          this.goods.oldPrice =this.$format(val.oldPrice); // 价格需要格式化\r\n          this.goods.costPrice=this.$format(val.costPrice); // 价格需要格式化\r\n        }\r\n      }\r\n    },\r\n    \"goods.categories\": {\r\n      deep: true,\r\n      handler(val) {\r\n        // 判断商品分类是否存在，存在才查询\r\n        if (val && val.length > 0) {\r\n          //把品牌列表设置为空\r\n          this.brandOptions = [];\r\n          // 根据分类查询品牌\r\n          this.$http\r\n            .get(\"/item/brand/of/category?id=\" + this.goods.categories[2].id)\r\n            .then(({ data }) => {\r\n              this.brandOptions = data;\r\n            });\r\n        }\r\n      }\r\n    },\r\n    \"goods.brandId\":{\r\n      handler(val){\r\n        if (val && val!= 0) {\r\n          //把商品列表设置为空\r\n          this.goodsOptions = [];\r\n          // 根据分类查询品牌\r\n          this.$http\r\n            .get(\"/item/spu/for/brand?id=\" + this.goods.brandId+\"&cid=\"+this.goods.categories[2].id)\r\n            .then(({ data }) => {\r\n              this.goodsOptions = data;\r\n            });\r\n        }\r\n      }\r\n    },\r\n    \"goods.spuId\":{\r\n      handler(val){\r\n        if (val && val!= 0) {\r\n          this.goodsOptions.forEach(spu =>{\r\n            if(this.goods.spuId == spu.id){\r\n              this.goods.name = spu.name;\r\n            }\r\n          });\r\n          this.$http\r\n              .get(\"/item/sku/of/spu?id=\" + this.goods.spuId)\r\n              .then(({ data }) => {\r\n                this.skuOptions = data;\r\n              });\r\n\r\n        }\r\n      }\r\n    },\r\n    \"goods.skuId\":{\r\n      handler(val){\r\n        if (val && val!= 0) {\r\n          this.skuOptions.forEach(sku =>{\r\n            if(sku.id == this.goods.skuId){\r\n              this.goods.title = sku.title;\r\n              this.goods.oldPrice =  this.$format(sku.price);\r\n              this.goods.skuPic = sku.images?sku.images:\"\";\r\n\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    skus() {\r\n      // 过滤掉用户没有填写数据的规格参数\r\n      const arr = this.specialSpecs.filter(s => s.options.length > 0);\r\n      // 通过reduce进行累加笛卡尔积\r\n      return arr.reduce(\r\n        (last, spec, index) => {\r\n          const result = [];\r\n          last.forEach(o => {\r\n            spec.options.forEach((option, i) => {\r\n              const obj = JSON.parse(JSON.stringify(o));\r\n              obj[spec.name] = {v:option, id:spec.id};\r\n              obj.indexes = (obj.indexes || '') + '_' +  i\r\n              if (index === arr.length - 1) {\r\n                obj.indexes = obj.indexes.substring(1);\r\n                // 如果发现是最后一组，则添加价格、库存等字段\r\n                Object.assign(obj, {\r\n                  price: 0,\r\n                  stock: 0,\r\n                  enable: false,\r\n                  images: []\r\n                });\r\n                if (this.isEdit) {\r\n                  // 如果是编辑，则回填sku信息\r\n                  const sku = this.goods.skus.get(obj.indexes);\r\n                  if (sku != null) {\r\n                    const { price, stock, enable, images } = sku;\r\n                    Object.assign(obj, {\r\n                      price: this.$format(price),\r\n                      stock,\r\n                      enable,\r\n                      images: images ? images.split(\",\") : [],\r\n                    });\r\n                  }\r\n                }\r\n              }\r\n              result.push(obj);\r\n            });\r\n          });\r\n          return result;\r\n        },\r\n        [{}]\r\n      );\r\n    },\r\n    headers() {\r\n      if (this.skus.length <= 0) {\r\n        return [];\r\n      }\r\n      const headers = [];\r\n      Object.keys(this.skus[0]).forEach(k => {\r\n        let value = k;\r\n        if (k === \"price\") {\r\n          // enable，表头要翻译成“价格”\r\n          k = \"价格\";\r\n        } else if (k === \"stock\") {\r\n          // enable，表头要翻译成“库存”\r\n          k = \"库存\";\r\n        } else if (k === \"enable\") {\r\n          // enable，表头要翻译成“是否启用”\r\n          k = \"是否启用\";\r\n        } else if (k === \"images\" || k === 'indexes') {\r\n          // 图片和索引不在表格中展示\r\n          return;\r\n        }\r\n        headers.push({\r\n          text: k,\r\n          align: \"center\",\r\n          sortable: false,\r\n          value\r\n        });\r\n      });\r\n      return headers;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n"]}]}